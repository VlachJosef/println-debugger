Point-Char: |
Name: typescript - basic println - point at the end of a line
Code:
  (lambda ()
    (println-preferences-default)
    (typescript-ts-mode)
    (kill-new "hello")
    (funcall-interactively 'println-debugger 1))
=-=
const handler = (): string => {|
}
=-=
const handler = (): string => {
  console.log("hello: ", hello);|
}
=-=-=

Name: typescript - basic println - point in the middle of a line
=-=
const handler| = (): string => {
}
=-=
const handler = (): string => {
  console.log("hello: ", hello);|
}
=-=-=

Name: typescript - basic println - point at the beginning of a line
=-=
|const handler = (): string => {
}
=-=
const handler = (): string => {
  console.log("hello: ", hello);|
}
=-=-=

Name: typescript - show identifier
Code:
  (lambda ()
    (println-preferences-default)
    (typescript-ts-mode)
    (kill-new "hello")
    (funcall-interactively 'println-debugger 1)
    (funcall-interactively 'println-debugger-show-identifier))
=-=
const handler = (): string => {|
}
=-=
const handler = (): string => {
  console.log("[handler] hello: ", hello);|
}
=-=-=

Name: typescript - print stamp
Code:
  (lambda ()
    (println-preferences-default)
    (typescript-ts-mode)
    (kill-new "lorem")
    (funcall-interactively 'println-debugger 1)
    (funcall-interactively 'println-debugger-stamp))
=-=
const handler = (): string => {|
}
=-=
const handler = (): string => {
  console.log("HeRe 111");|
}
=-=-=

Name: typescript - print stamp followed by three items and align
Code:
  (lambda ()
    (println-preferences-default)
    (typescript-ts-mode)
    (kill-new "lorem")
    (kill-new "pipa")
    (kill-new "foo")
    (funcall-interactively 'println-debugger 1)
    (funcall-interactively 'println-debugger-stamp)
    (funcall-interactively 'println-debugger-increase)
    (funcall-interactively 'println-debugger-increase)
    (funcall-interactively 'println-debugger-increase)
    (funcall-interactively 'println-debugger-align))
=-=
const handler = (): string => {|
}
=-=
const handler = (): string => {
  console.log("HeRe 111");
  console.log("foo  : ", foo);
  console.log("pipa : ", pipa);
  console.log("lorem: ", lorem);|
}
=-=-=


Name: typescript - print stamp followed by three items and multiline
Code:
  (lambda ()
    (println-preferences-default)
    (typescript-ts-mode)
    (kill-new "\"lorem\"")
    (kill-new "pipa")
    (kill-new "foo")
    (funcall-interactively 'println-debugger 3)
    (funcall-interactively 'println-debugger-multiline))
=-=
const handler = (): string => {|
}
=-=
const handler = (): string => {
  console.log("foo: ", foo, "pipa: ", pipa, "lorem: ", "lorem");|
}
=-=-=

Name: typescript - print foreach basic
Code:
  (lambda ()
    (println-preferences-default)
    (typescript-ts-mode)
    (kill-new "lorem")
    (funcall-interactively 'println-debugger 1)
    (funcall-interactively 'println-debugger-foreach))
=-=
const handler = (): string => {|
}
=-=
const handler = (): string => {
  lorem.forEach((item) => console.log(item));
}
=-=-=

Name: typescript - print foreach basic -> delimited
Code:
  (lambda ()
    (println-preferences-default)
    (typescript-ts-mode)
    (kill-new "lorem")
    (funcall-interactively 'println-debugger 1)
    (funcall-interactively 'println-debugger-foreach)
    (funcall-interactively 'println-debugger-foreach))
=-=
const handler = (): string => {|
}
=-=
const handler = (): string => {
  console.log("lorem START");|
  lorem.forEach((item) => console.log(item));
  console.log("lorem END");
}
=-=-=

Name: typescript - print identifier only
Code:
  (lambda ()
    (println-preferences-default)
    (typescript-ts-mode)
    (kill-new "lo\"rem")
    (funcall-interactively 'println-debugger 1)
    (funcall-interactively 'println-debugger-literal-or-identifier))
=-=
const handler = (): string => {|
}
=-=
const handler = (): string => {
  console.log("lorem");|
}
=-=-=

Name: typescript - print literal only
Code:
  (lambda ()
    (println-preferences-default)
    (typescript-ts-mode)
    (kill-new "lo\"rem")
    (funcall-interactively 'println-debugger 1)
    (funcall-interactively 'println-debugger-literal-or-identifier)
    (funcall-interactively 'println-debugger-literal-or-identifier))
=-=
const handler = (): string => {|
}
=-=
const handler = (): string => {
  console.log(lo"rem);|
}
=-=-=
