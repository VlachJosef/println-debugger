Point-Char: |
Name: scala - basic println - point at the end of a line
Code:
  (lambda ()
    (println-preferences-default)
    (scala-ts-mode)
    (kill-new "hello")
    (funcall-interactively 'println-insert 1))
=-=
object Handler {|
}
=-=
object Handler {
  println("hello: " + hello)
}
=-=-=

Name: scala - basic println - point in the middle of a line
=-=
object| Handler {
}
=-=
object Handler {
  println("hello: " + hello)
}
=-=-=

Name: scala - basic println - point at the beginning of a line
=-=
|object Handler {
}
=-=
object Handler {
  println("hello: " + hello)|
}
=-=-=

Name: scala - 3 println expressions
Code:
  (lambda ()
    (println-preferences-default)
    (scala-ts-mode)
    (kill-new "lorem")
    (kill-new "pipa")
    (kill-new "foo")
    (funcall-interactively 'println-insert 3))
=-=
object Handler {|
}
=-=
object Handler {
  println("foo: " + foo)
  println("pipa: " + pipa)
  println("lorem: " + lorem)|
}
=-=-=

Name: scala - print 3 expressions and then reverse them
Code:
  (lambda ()
    (println-preferences-default)
    (scala-ts-mode)
    (kill-new "lorem")
    (kill-new "pipa")
    (kill-new "foo")
    (funcall-interactively 'println-insert 3)
    (funcall-interactively 'println-reverse))
=-=
object Handler {|
}
=-=
object Handler {
  println("lorem: " + lorem)
  println("pipa: " + pipa)
  println("foo: " + foo)|
}
=-=-=

Name: scala - print stamp
Code:
  (lambda ()
    (println-preferences-default)
    (scala-ts-mode)
    (kill-new "lorem")
    (funcall-interactively 'println-insert 1)
    (funcall-interactively 'println-stamp))
=-=
object Handler {|
}
=-=
object Handler {
  println("HeRe 111")|
}
=-=-=

Name: scala - print stamp followed by one item
Code:
  (lambda ()
    (println-preferences-default)
    (scala-ts-mode)
    (kill-new "lorem")
    (funcall-interactively 'println-insert 1)
    (funcall-interactively 'println-stamp)
    (funcall-interactively 'println-increase))
=-=
object Handler {|
}
=-=
object Handler {
  println("HeRe 111")
  println("lorem: " + lorem)|
}
=-=-=


Name: scala - print stamp followed by three items
Code:
  (lambda ()
    (println-preferences-default)
    (scala-ts-mode)
    (kill-new "lorem")
    (kill-new "pipa")
    (kill-new "foo")
    (funcall-interactively 'println-insert 1)
    (funcall-interactively 'println-stamp)
    (funcall-interactively 'println-increase)
    (funcall-interactively 'println-increase)
    (funcall-interactively 'println-increase))
=-=
object Handler {|
}
=-=
object Handler {
  println("HeRe 111")
  println("foo: " + foo)
  println("pipa: " + pipa)
  println("lorem: " + lorem)|
}
=-=-=

Name: scala - print stamp followed by three items and reverse
Code:
  (lambda ()
    (println-preferences-default)
    (scala-ts-mode)
    (kill-new "lorem")
    (kill-new "pipa")
    (kill-new "foo")
    (funcall-interactively 'println-insert 1)
    (funcall-interactively 'println-stamp)
    (funcall-interactively 'println-increase)
    (funcall-interactively 'println-increase)
    (funcall-interactively 'println-increase)
    (funcall-interactively 'println-reverse))
=-=
object Handler {|
}
=-=
object Handler {
  println("HeRe 111")
  println("lorem: " + lorem)
  println("pipa: " + pipa)
  println("foo: " + foo)|
}
=-=-=

Name: scala - print stamp followed by three items and align
Code:
  (lambda ()
    (println-preferences-default)
    (scala-ts-mode)
    (kill-new "lorem")
    (kill-new "pipa")
    (kill-new "foo")
    (funcall-interactively 'println-insert 1)
    (funcall-interactively 'println-stamp)
    (funcall-interactively 'println-increase)
    (funcall-interactively 'println-increase)
    (funcall-interactively 'println-increase)
    (funcall-interactively 'println-align))
=-=
object Handler {|
}
=-=
object Handler {
  println("HeRe 111")
  println("foo  : " + foo)
  println("pipa : " + pipa)
  println("lorem: " + lorem)|
}
=-=-=

Name: scala - print stamp followed by three items and multiline
Code:
  (lambda ()
    (println-preferences-default)
    (scala-ts-mode)
    (kill-new "lorem")
    (kill-new "pipa")
    (kill-new "foo")
    (funcall-interactively 'println-insert 3)
    (funcall-interactively 'println-multiline))
=-=
object Handler {|
}
=-=
object Handler {
  println("foo: " + foo + ", pipa: " + pipa + ", lorem: " + lorem)|
}
=-=-=

Name: scala - print stamp followed by three items and multiline
Code:
  (lambda ()
    (println-preferences-default)
    (scala-ts-mode)
    (kill-new "lorem")
    (kill-new "pipa")
    (kill-new "foo")
    (funcall-interactively 'println-insert 3)
    (funcall-interactively 'println-multiline)
    (funcall-interactively 'println-reverse))
=-=
object Handler {|
}
=-=
object Handler {
  println("lorem: " + lorem + ", pipa: " + pipa + ", foo: " + foo)|
}
=-=-=

Name: scala - print foreach basic
Code:
  (lambda ()
    (println-preferences-default)
    (scala-ts-mode)
    (kill-new "lorem")
    (funcall-interactively 'println-insert 1)
    (funcall-interactively 'println-foreach))
=-=
object Handler {|
}
=-=
object Handler {
  lorem.foreach(println)|
}
=-=-=

Name: scala - print foreach basic -> delimited
Code:
  (lambda ()
    (println-preferences-default)
    (scala-ts-mode)
    (kill-new "lorem")
    (funcall-interactively 'println-insert 1)
    (funcall-interactively 'println-foreach)
    (funcall-interactively 'println-foreach))
=-=
object Handler {|
}
=-=
object Handler {
  println("lorem START")|
  lorem.foreach(println)
  println("lorem END")
}
=-=-=

Name: scala - print foreach basic -> delimited -> basic
Code:
  (lambda ()
    (println-preferences-default)
    (scala-ts-mode)
    (kill-new "lorem")
    (funcall-interactively 'println-insert 1)
    (funcall-interactively 'println-foreach)
    (funcall-interactively 'println-foreach)
    (funcall-interactively 'println-foreach))
=-=
object Handler {|
}
=-=
object Handler {
  lorem.foreach(println)|
}
=-=-=

Name: scala - print identifier only
Code:
  (lambda ()
    (println-preferences-default)
    (scala-ts-mode)
    (kill-new "lorem")
    (funcall-interactively 'println-insert 1)
    (funcall-interactively 'println-literal/identifier))
=-=
object Handler {|
}
=-=
object Handler {
  println("lorem")|
}
=-=-=

Name: scala - print literal only
Code:
  (lambda ()
    (println-preferences-default)
    (scala-ts-mode)
    (kill-new "lorem")
    (funcall-interactively 'println-insert 1)
    (funcall-interactively 'println-literal/identifier)
    (funcall-interactively 'println-literal/identifier))
=-=
object Handler {|
}
=-=
object Handler {
  println(lorem)|
}
=-=-=

Name: scala - committing two clusters must apply local cluster settings
Code:
  (lambda ()
    (println-preferences-default)
    (scala-ts-mode)
    (kill-new "foo")
    (kill-new "lorem")
    (funcall-interactively 'println-insert 1)
    (funcall-interactively 'println-increase)
    (funcall-interactively 'println-align)
    (line-move-1 1)
    (funcall-interactively 'println-insert 1)
    (funcall-interactively 'println-increase)
    (funcall-interactively 'println-align)
    (funcall-interactively 'println-commit)
    (line-move-1 -3)
    (funcall-interactively 'println-commit))
=-=
object Handler {|

}
=-=
object Handler {
  println("lorem: " + lorem)
  println("foo  : " + fo|o)

  println("lorem: " + lorem)
  println("foo: " + foo)
}
=-=-=

Name: scala - committing two stamp starting clusters must apply local cluster settings
Code:
  (lambda ()
    (println-preferences-stamp-cluster)
    (scala-ts-mode)
    (kill-new "foo")
    (kill-new "lorem")
    (funcall-interactively 'println-insert 1)
    (funcall-interactively 'println-increase)
    (funcall-interactively 'println-increase)
    (funcall-interactively 'println-align)
    (line-move-1 1)
    (funcall-interactively 'println-insert 1)
    (funcall-interactively 'println-increase)
    (funcall-interactively 'println-increase)
    (funcall-interactively 'println-align)
    (funcall-interactively 'println-commit)
    (line-move-1 -4)
    (funcall-interactively 'println-commit))
=-=
object Handler {|

}
=-=
object Handler {
  println("HeRe 333")
  println("lorem: " + lorem)
  println("foo  : " + fo|o)

  println("HeRe 444")
  println("lorem: " + lorem)
  println("foo: " + foo)
}
=-=-=


Name: scala - ignore last line line-item at the end
Code:
  (lambda ()
    (println-preferences-default)
    (scala-ts-mode)
    (kill-new "foo")
    (kill-new "ignore-me")
    (kill-new "lorem")
    (funcall-interactively 'println-insert 1)
    (funcall-interactively 'println-increase)
    (funcall-interactively 'println-ignore)
    (funcall-interactively 'println-increase))
=-=
object Handler {|
}
=-=
object Handler {
  println("lorem: " + lorem)
  println("foo: " + foo)|
}
=-=-=

Name: scala - ignore middle line line-item
Code:
  (lambda ()
    (println-preferences-default)
    (scala-ts-mode)
    (kill-new "bar")
    (kill-new "lorem-ipsum")
    (kill-new "ignore")
    (kill-new "foo")
    (funcall-interactively 'println-insert 1)
    (funcall-interactively 'println-increase)
    (funcall-interactively 'println-increase)
    (funcall-interactively 'println-increase)
    (line-move-1 -2)
    (funcall-interactively 'println-ignore))
=-=
object Handler {|
}
=-=
object Handler {
  println("foo: " + foo)
  println("lorem-ipsum: |" + lorem-ipsum)
  println("bar: " + bar)
}
=-=-=

Name: scala - ignoring single line replaces it with next-kill
Code:
  (lambda ()
    (println-preferences-default)
    (scala-ts-mode)
    (kill-new "foo")
    (kill-new "lorem")
    (kill-new "ignore-me")
    (funcall-interactively 'println-insert 1)
    (funcall-interactively 'println-ignore)
    (funcall-interactively 'println-ignore))
=-=
object Handler {|
}
=-=
object Handler {
  println("foo: " + foo)|
}
=-=-=

Name: scala - kill-text cluster - repeated ignore when kill-ring is exhausted do not delete last kill-text line
Code:
  (lambda ()
    (println-preferences-default)
    (scala-ts-mode)
    (let ((kill-ring nil))
      (kill-new "foo")
      (kill-new "lorem")
      (funcall-interactively 'println-insert 1)
      (funcall-interactively 'println-ignore)
      (funcall-interactively 'println-ignore)))
=-=
object Handler {|
}
=-=
object Handler {
  println("foo: " + foo)|
}
=-=-=

Name: scala - stamp cluster - repeated ignore when kill-ring is exhausted do not delete last kill-text line
Code:
  (lambda ()
    (println-preferences-default)
    (scala-ts-mode)
    (let ((kill-ring nil))
      (kill-new "foo")
      (kill-new "lorem")
      (funcall-interactively 'println-insert 1)
      (funcall-interactively 'println-stamp)
      (funcall-interactively 'println-increase)
      (funcall-interactively 'println-increase)
      (funcall-interactively 'println-ignore)
      (funcall-interactively 'println-ignore)))
=-=
object Handler {|
}
=-=
object Handler {
  println("HeRe 111")
  println("lorem: " + lo|rem)
}
=-=-=

Name: scala - toggle stamp to next kill-text when kill-ring is empty do nothing
Code:
  (lambda ()
    (println-preferences-stamp-cluster)
    (scala-ts-mode)
    (let ((kill-ring nil))
      (funcall-interactively 'println-insert 1)
      (funcall-interactively 'println-stamp)))
=-=
object Handler {|
}
=-=
object Handler {
  println("HeRe 333")|
}
=-=-=
